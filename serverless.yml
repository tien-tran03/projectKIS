service: kis-serverless

provider:
  name: aws
  runtime: nodejs18.x
  region: us-east-1
  stage: ${opt:stage}
  memorySize: 512 # Optional
  timeout: 10   # repository wide Lambda timeout
  environment:  # repository wide Lambda env variables
    STAGE: ${self:provider.stage}
    #  JWT
    JWT_SECRET: ${env:JWT_SECRET}
    REFRESH_SECRET: ${env:REFRESH_SECRET}
    # redis
    REDIS_HOST: ${env:REDIS_HOST}
    REDIS_PORT: ${env:REDIS_PORT}
    # MySQL
    DB_HOST: ${env:DB_HOST}
    DB_USER: ${env:DB_USER}
    DB_PASSWORD: ${env:DB_PASSWORD}
    DB_NAME: ${env:DB_NAME}
    DB_PORT: ${env:DB_PORT}
    
plugins:
- serverless-offline # used for local execution

custom:
  serverless-offline:
    httpPort: ${env:PORT}

functions:
  # hello:
  #   handler: apps/apis/api_hello/src/handler.hello
  #   events:
  #     - http:
  #         path: hello
  #         method: get
  #         cors: true
  #   environment:
  #     ENV_VAR_1: ${env:ENV_VAR_1}

  login:
    handler: apps/web_builder/wb_backend/wb_serverless/wb_api_login/src/handler.start
    events:
      - http:
          path: login
          method: post
          cors: true
      - http:
          path: refresh
          method: post
          cors: true

  register:
    handler: apps/web_builder/wb_backend/wb_serverless/wb_api_register/src/handler.register
    events:
      - http:
          path: register
          method: post
          cors: true

  verify-token:
    handler: apps/web_builder/wb_backend/wb_serverless/wb_api_verify_token/src/handler.run
    events:
      - http:
          path: verify-token
          method: post
          cors: true

  logout:
    handler: apps/web_builder/wb_backend/wb_serverless/wb_api_logout/src/handler.logout
    events:
      - http:
          path: logout
          method: post
          cors: true

  # get-users:
  #   handler: apps/apis/api_get_users/src/handler.run
  #   events:
  #     - http:
  #         path: get-users
  #         method: get
  #         cors: true